{"version":3,"file":"static/js/164.ff25a698.chunk.js","mappings":"oOACA,K,4BCsCA,EAhC+B,SAACA,GAE5B,MAA8BC,EAAAA,UAAe,GAA7C,eAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,EAAAA,SAAeD,EAAMI,QAA/C,eAAKA,EAAL,KAAaC,EAAb,MACIC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UAClB,CAACJ,EAAMI,SAab,OACI,4BACMF,IACF,0BAAK,iBAAMK,cAfE,WACnBJ,GAAY,IAcD,SAAqCH,EAAMI,QAAU,YACzDF,IACG,0BAAK,kBAAOM,WAAW,EAAMC,OAdlB,WACnBN,GAAY,GACbH,EAAMU,aAAaN,IAY2CO,SAV1C,SAACC,GACpBP,EAAUO,EAAEC,cAAcC,QAUNA,MAAOV,EAAQW,KAAK,e,SCchD,EAlCoB,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,QAAQZ,EAAgD,EAAhDA,OAAOM,EAAyC,EAAzCA,aACjC,OAAKM,GAKD,4BACI,SAACC,EAAD,CAAwBb,OAAQA,EAAQM,aAAcA,KACtD,gBAAKQ,IAAKF,EAAQG,OAAOC,MAAeC,EAAkCC,IAAI,YAC9E,0BAAKN,EAAQO,SAAb,QACA,4BACI,gBAAKL,IAAKF,EAAQG,OAAOK,MAAgBH,EAAkCC,IAAI,YAC/E,4BACI,0CAC4B,IAA3BN,EAAQS,gBACL,kBAAOV,KAAK,WAAWW,gBAAgB,KACvC,kBAAOX,KAAK,WAAWW,gBAAgB,QAE/C,gEAAwCV,EAAQW,8BAChD,gDAAwBX,EAAQY,YAChC,wCACA,0BAAOZ,EAAQa,SAASC,YACxB,0BAAOd,EAAQa,SAASE,UACxB,0BAAOf,EAAQa,SAASG,aACxB,0BAAOhB,EAAQa,SAASI,YACxB,0BAAOjB,EAAQa,SAASK,WACxB,0BAAOlB,EAAQa,SAASM,MACxB,0BAAOnB,EAAQa,SAASO,WACxB,0BAAOpB,EAAQa,SAASQ,iBA1BzB,SAACC,EAAA,EAAD,KCKf,EAXkC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAEzC,OACI,4BACI,gBAAKtB,IAAI,GAAGI,IAAI,MAChB,yBAAMiB,KACN,0BAAK,qCAAaC,W,uCCH1BC,GAAYC,EAAAA,EAAAA,GAAiB,IAmCjC,EAjCgBzC,EAAAA,MAAW,SAACD,GAExB,IAAI2C,EAAU3C,EAAM4C,YAAYC,MAAMC,KAAI,SAAAC,GAAE,OAAI,SAAC,EAAD,CAAMR,QAASQ,EAAGR,QAASC,WAAYO,EAAGP,gBAiBpFQ,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,yBAArCD,EAX4C,SAACjD,GACrE,OAAO,kBAAMmD,SAAUnD,EAAMoD,aAAtB,WACH,0BACI,SAACC,EAAA,EAAD,CAAOC,KAAM,cAAeC,UAAWC,EAAAA,GAAUC,YAAa,UACvDC,SAAU,CAACC,EAAAA,EAAUlB,QAEhC,0BACI,+CAKZ,OACI,4BACI,4BACI,sCACA,SAACO,EAAD,CAAqBG,SApBjB,SAACS,GACb5D,EAAM6D,QAAQD,EAAOE,oBAqBjB,qCACCnB,QCTb,GAFyBoB,EAAAA,EAAAA,KAdH,SAACC,GACnB,MAAO,CACHpB,YAAaoB,EAAMpB,gBAIF,SAACqB,GACtB,MAAO,CACHJ,QAAS,SAACC,GACNG,GAASJ,EAAAA,EAAAA,IAAQC,QAKJC,CAA6CG,GCNtE,EATgB,SAAClE,GACb,OACI,iBAAKmE,UAAWC,EAAAA,QAAhB,WACI,SAAC,EAAD,CAAapD,QAAShB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQM,aAAcV,EAAMU,gBAC/E,SAAC,EAAD,Q,8BCmCN2D,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAqBD,OArBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAEF,WACI,IAAIC,EAASC,KAAKvE,MAAMwE,MAAMC,OAAOC,GAChCJ,IACDA,EAASC,KAAKvE,MAAM2E,oBAEhBL,EAASC,KAAKvE,MAAM4E,QAAQC,KAAK,WAGzCN,KAAKvE,MAAM8E,eAAeR,GAC1BC,KAAKvE,MAAM+E,UAAUT,KACxB,oBAED,WACI,OACI,0BACI,SAAC,GAAD,kBAAaC,KAAKvE,OAAlB,IAAyBgB,QAASuD,KAAKvE,MAAMgB,QAASZ,OAAQmE,KAAKvE,MAAMI,OAChEM,aAAc6D,KAAKvE,MAAMU,sBAG7C,EArBC2D,CAAyBpE,EAAAA,WAgC/B,GAAe+E,EAAAA,EAAAA,KACXjB,EAAAA,EAAAA,KATkB,SAACC,GAAD,MAA+C,CACjEhD,QAASgD,EAAMpB,YAAY5B,QAC3BZ,OAAQ4D,EAAMpB,YAAYxC,OAC1BuE,iBAAkBX,EAAMiB,KAAKP,GAC7BQ,OAAQlB,EAAMiB,KAAKC,UAKM,CAACJ,eAAAA,EAAAA,GAAgBC,UAAAA,EAAAA,GAAWrE,aAAAA,EAAAA,KACrDyE,EAAAA,GAAYC,EAAAA,EAFhB,CAGEf","sources":["components/Profile/Profile.module.css","components/Profile/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, {useEffect} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = React.useState(false)\r\n    let [status, setStatus] = React.useState(props.status)\r\n        useEffect(()=>{\r\n            setStatus(props.status)\r\n        },[props.status])\r\n    const activateMode = () => {\r\n      setEditMode(true)\r\n    }\r\n    const deactivateMode = () => {\r\n        setEditMode(false)\r\n       props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e:any) =>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div><span onDoubleClick={activateMode} >{props.status || '-----'}</span></div>}\r\n            {editMode &&\r\n                <div><input autoFocus={true} onBlur={deactivateMode} onChange={onStatusChange}\r\n                            value={status} type='text' />\r\n                </div>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport Preloader from \"../Common/Preloader\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHook\";\r\nimport userPhoto from \"../../Assets/Img/avatar.png\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile,status,updateStatus }: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            <img src={profile.photos.large=! null ? userPhoto : profile.photos.large} alt=\"Avatar\"/>\r\n            <h1>{profile.fullName} </h1>\r\n            <div>\r\n                <img src={profile.photos.small =! null ? userPhoto : profile.photos.small} alt=\"Avatar\"/>\r\n                <div>\r\n                    <p>looking a job</p>\r\n                    {profile.lookingForAJob === true ?\r\n                        <input type='checkbox' defaultChecked={true}/> :\r\n                        <input type='checkbox' defaultChecked={false}/>}\r\n                </div>\r\n                <p>Description about my looking a job: {profile.lookingForAJobDescription}</p>\r\n                <p>Some info about me: {profile.aboutMe}</p>\r\n                <h3>my links: </h3>\r\n                <span>{profile.contacts.facebook}</span>\r\n                <span>{profile.contacts.github}</span>\r\n                <span>{profile.contacts.instagram}</span>\r\n                <span>{profile.contacts.mainLink}</span>\r\n                <span>{profile.contacts.twitter}</span>\r\n                <span>{profile.contacts.vk}</span>\r\n                <span>{profile.contacts.website}</span>\r\n                <span>{profile.contacts.youtube}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\n\r\n\r\nexport type PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({message, likesCount}) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src=\"\" alt=\"\"/>\r\n            <div>{message}</div>\r\n            <div><span>Likes {likesCount}</span></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsTypes} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validator\";\r\nimport {Textarea} from \"../../Common/Textarea\";\r\n\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\nlet maxlength = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsTypes) => {\r\n\r\n    let onePost = props.profilePage.posts.map(el => <Post message={el.message} likesCount={el.likesCount}/>);\r\n\r\n    const addPost = (values: AddNewPostFormType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n        return <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} placeholder={'type...'}\r\n                       validate={[required, maxlength]}/>\r\n            </div>\r\n            <div>\r\n                <button>Button</button>\r\n            </div>\r\n        </form>\r\n    }\r\n    const AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4>new post</h4>\r\n                <AddNewPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <h3>My Posts</h3>\r\n            {onePost}\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;\r\n","import {addPost, initialStateType} from \"../../../redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../../redux/Redux-store\";\r\nimport { Dispatch } from 'redux';\r\n\r\nexport type MapStatePropsType = {\r\n    profilePage:initialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsPropsTypes = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\n\r\n type ProfilePropsType={\r\n    profile: ProfileType | null\r\n     status: string\r\n     updateStatus: (status: string) => void\r\n\r\n }\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/Profile-reducer\";\r\nimport React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {RootStateRedux} from \"../../redux/Redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: null | string\r\n        github: null | string\r\n        instagram: null | string\r\n        mainLink: null | string\r\n        twitter: null | string\r\n        vk: null | string\r\n        website: null | string\r\n        youtube: null | string\r\n    }\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    id: number\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n\r\n\r\n}\r\n\r\ntype PathParamsType = {\r\n    id: number\r\n}\r\n\r\ntype PropsType = RouteComponentProps<any> & ProfilePropsTypes\r\nexport type ProfilePropsTypes = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.id\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                userId = this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter, withAuthRedirect\r\n)(ProfileContainer)"],"names":["props","React","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","type","profile","ProfileStatusWithHook","src","photos","large","userPhoto","alt","fullName","small","lookingForAJob","defaultChecked","lookingForAJobDescription","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","Preloader","message","likesCount","maxlength","maxLengthCreator","onePost","profilePage","posts","map","el","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","values","addPost","newPostText","connect","state","dispatch","MyPosts","className","s","ProfileContainer","userId","this","match","params","id","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter","withAuthRedirect"],"sourceRoot":""}