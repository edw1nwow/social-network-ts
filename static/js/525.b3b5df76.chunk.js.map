{"version":3,"file":"static/js/525.b3b5df76.chunk.js","mappings":"gKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA4I,0BCA5I,EAAyB,2B,mBCmBzB,EAXyC,SAAC,GAAgB,IAAfA,EAAc,EAAdA,KAEnCC,EAAO,YAF0C,EAARC,GAG7C,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SACKD,OCdjB,EAA+D,yBCiB/D,EATuC,SAAC,GAAe,IAAdM,EAAa,EAAbA,QAErC,OACI,gBAAKH,UAAWC,EAAhB,SACKE,K,uCCCPC,GAAcC,EAAAA,EAAAA,GAAiB,IAW/BC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAT4C,SAACE,GACrE,OACI,kBAAMC,SAAUD,EAAME,aAAtB,WACA,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUZ,GAAcP,KAAM,iBAAkBoB,YAAa,oBACpG,0BACI,6CA8BZ,EAxBgB,SAACR,GACb,IAAIS,EAAkBT,EAAMU,aAAaC,QAAQC,KAAI,SAACC,GAAD,OAAoB,SAAC,EAAD,CAAYzB,KAAMyB,EAAGzB,KAAME,GAAIuB,EAAGvB,QACvGwB,EAAmBd,EAAMU,aAAaK,SAASH,KAAI,SAACC,GAAD,OAAqB,SAAC,EAAD,CAASnB,QAASmB,EAAGnB,aAMjG,OACI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKiB,KAEL,iBAAKlB,UAAWC,EAAhB,UACKsB,GACD,0BACI,SAACjB,EAAD,CAAqBI,SAZjB,SAACe,GACjBhB,EAAMiB,mBAAmBD,EAAOE,4B,6BCDxC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACC,GACnB,MAAO,CACHX,aAAcW,EAAMX,iBAGH,SAACY,GACtB,MAAO,CAEHL,mBAAoB,SAACC,GACjBI,GAASC,EAAAA,EAAAA,GAAcL,SAO/BM,EAAAA,EAFJ,CAGEC","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Dialogs\":\"Dialogs_Dialogs__1nwBA\",\"DialogsItems\":\"Dialogs_DialogsItems__NUnKi\",\"Dialog\":\"Dialogs_Dialog__xXmvz\",\"Messages\":\"Dialogs_Messages__bx9Xd\",\"Message\":\"Dialogs_Message__NIwIL\"};","// extracted by mini-css-extract-plugin\nexport default {\"Dialog\":\"DialogItem_Dialog__Q4NTD\"};","import React from \"react\";\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem: React.FC<DialogType> = ({name, id}) => {\r\n\r\n    let path = '/Dialogs/' + id\r\n    return (\r\n        <div className={s.Dialog}>\r\n            <NavLink to={path}>\r\n                {name}\r\n            </NavLink>\r\n        </div>)\r\n}\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"Messages\":\"Message_Messages__gOinW\",\"Message\":\"Message_Message__86v2O\"};","import React from \"react\";\r\nimport s from './Message.module.css'\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = ({message}) => {\r\n\r\n    return (\r\n        <div className={s.Message}>\r\n            {message}\r\n        </div>)\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsTypes} from \"./DialogsContainer\";\r\nimport {DialogType, MessageType} from \"../../redux/Dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/Textarea\";\r\nimport {maxLengthCreator, required} from \"../../utils/validator\";\r\n\r\ntype AddMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst addMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props ) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} validate={[required, maxLength50]} name={'newMessageText'} placeholder={'type your text'} />\r\n        <div>\r\n            <button>send</button>\r\n        </div>\r\n    </form>)\r\n}\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: \"dialogAddMessageForm\"})(addMessageForm)\r\n\r\nconst Dialogs = (props: DialogsPropsTypes) => {\r\n    let dialogsElements = props.messagesPage.dialogs.map((el: DialogType) => <DialogItem name={el.name} id={el.id}/>)\r\n    let messagesElements = props.messagesPage.messages.map((el: MessageType) => <Message message={el.message}/>)\r\n\r\n    let addNewMessage = (values: AddMessageFormType) => {\r\n        props.onSendMessageClick(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.Dialogs}>\r\n            <div className={s.DialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.Messages}>\r\n                {messagesElements}\r\n                <div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {InitialStateType, sendMessageAC} from \"../../redux/Dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../redux/Redux-store\";\r\nimport {Dispatch, compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    messagesPage: InitialStateType\r\n}\r\ntype MapDispatchPropsType = {\r\n    onSendMessageClick: (newMessageText: string ) => void\r\n}\r\nexport type DialogsPropsTypes = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStatePropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n\r\n        onSendMessageClick: (newMessageText: string) => {\r\n            dispatch(sendMessageAC(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"names":["name","path","id","className","s","to","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","dialogsElements","messagesPage","dialogs","map","el","messagesElements","messages","values","onSendMessageClick","newMessageText","compose","connect","state","dispatch","sendMessageAC","withAuthRedirect","Dialogs"],"sourceRoot":""}