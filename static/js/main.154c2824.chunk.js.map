{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Header/header.module.css","components/Navbar/navbar.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","serviceWorker.ts","components/State/State.ts","components/Header/header.tsx","components/Navbar/navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","App.tsx","render.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Store","_state","profilePage","messageForNewPost","posts","id","likesCount","message","messagesPage","dialogs","name","messages","changeNewText","newText","this","_onChange","addPost","postText","newPost","push","console","log","subscribe","callback","getState","Header","className","s","header","xmlns","width","height","fill","viewBox","d","fill-rule","clip-rule","Navbar","sidebar","to","Post","src","alt","MyPosts","props","onePost","map","el","value","onChange","e","changeNewTextCallback","currentTarget","onClick","addPostCallback","ProfileInfo","Profile","wrapper","bind","DialogItem","path","Dialog","Message","Dialogs","dialogsElements","messagesElements","DialogsItems","Messages","App","component","renderTree","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.154c2824.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__1_vIo\",\"DialogsItems\":\"Dialogs_DialogsItems__2EuEe\",\"Dialog\":\"Dialogs_Dialog__3LvOC\",\"Messages\":\"Dialogs_Messages__3fd_P\",\"Message\":\"Dialogs_Message__8MJFB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3PuLn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"navbar_sidebar__1Jhu_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialog\":\"DialogItem_Dialog__hI6MV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Messages\":\"Message_Messages__2rMDL\",\"Message\":\"Message_Message__1zHBW\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type StoreType = {\r\n    _state: StateType\r\n    changeNewText: (newText: string) => void\r\n    addPost: (postText: string) => void\r\n    subscribe: (callback: () => void) => void\r\n    _onChange: () => void\r\n    getState: ()=> StateType\r\n}\r\ntype MessageType = {\r\n    message: string\r\n}\r\ntype DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\ntype PostsType = {\r\n    id: string\r\n    likesCount: number\r\n    message: string\r\n}\r\ntype ProfilePageType = {\r\n    messageForNewPost: string\r\n    posts: Array<PostsType>\r\n}\r\ntype messagesPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type StateType = {\r\n    profilePage: ProfilePageType\r\n    messagesPage: messagesPageType\r\n\r\n}\r\nexport type myPostsType = {\r\n    message: string\r\n    addPostCallback: (postText: string) => void\r\n    changeNewTextCallback: (newText: string) => void\r\n}\r\n\r\n\r\n\r\nconst Store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            messageForNewPost: '',\r\n            posts: [\r\n                {id: '1', likesCount: 1, message: 'Hello'},\r\n                {id: '2', likesCount: 2, message: 'Dima '},\r\n                {id: '3', likesCount: 3, message: 'kak tu'},\r\n                {id: '4', likesCount: 4, message: 'Nope'}\r\n            ]\r\n        },\r\n        messagesPage: {\r\n            dialogs: [\r\n                {id: \"1s\", name: 'Stas'},\r\n                {id: \"s2\", name: \"Lera\"},\r\n                {id: \"3s\", name: \"vasya\"},\r\n                {id: \"4s\", name: \"kirill\"}\r\n            ],\r\n            messages: [\r\n                {message: \"Hello\"},\r\n                {message: \"How are u\"},\r\n                {message: \"Bye\"},\r\n                {message: \"=D\"}\r\n            ]\r\n        }\r\n    },\r\n    changeNewText(newText: string) {\r\n        this._state.profilePage.messageForNewPost = newText\r\n        this._onChange()\r\n    },\r\n    addPost(postText: string) {\r\n        let newPost: PostsType = {\r\n            id: '5',\r\n            message: postText,\r\n            likesCount: 0\r\n        }\r\n        Store._state.profilePage.posts.push(newPost)\r\n        this._onChange()\r\n    },\r\n    _onChange() {\r\n        console.log('hello')\r\n    },\r\n    subscribe(callback) {\r\n        this._onChange = callback\r\n    },\r\n    getState(){\r\n       return this._state\r\n    }\r\n}\r\n\r\n\r\nexport default Store;","import React from 'react';\r\nimport s from './header.module.css'\r\n\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div className={s.header}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" fill=\"none\" viewBox=\"0 0 40 40\"><path fill=\"#000\" d=\"M20 40C9 40 0 31 0 20C0 9 9 0 20 0C31 0 40 9 40 20C40 31 31 40 20 40ZM20 2C10.1 2 2 10.1 2 20C2 29.9 10.1 38 20 38C29.9 38 38 29.9 38 20C38 10.1 29.9 2 20 2Z\"/><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M16.7 24.1L26 15.7C26.4 15.3 25.9 15.2 25.4 15.5L14 22.7L9.10003 21.2C8.00003 20.9 8.00003 20.1 9.30003 19.6L28.6 12.2C29.5 11.8 30.3 12.4 30 13.8L26.7 29.3C26.5 30.4 25.8 30.7 24.9 30.2L19.9 26.5L17.5 28.8C17.2 29.1 16.8 29.1 16.8 28.8L16.7 24.1Z\" clip-rule=\"evenodd\"/></svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport s from './navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n    return (\r\n        <div className={s.sidebar}>\r\n            <NavLink to=\"/Profile\">profile</NavLink>\r\n            <NavLink to=\"/Dialogs\">messages</NavLink>\r\n            <NavLink to=\"#\">news</NavLink>\r\n            <NavLink to=\"#\">music</NavLink>\r\n            <NavLink to=\"#\">settings</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\n\r\nexport type PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({message, likesCount}) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src=\"\" alt=\"\"/>\r\n            <div>{message}</div>\r\n            <div><span>Likes {likesCount}</span></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React, {ChangeEvent} from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport {myPostsType} from \"../../State/State\";\r\nimport Store from \"../../State/State\";\r\n\r\nconst MyPosts = (props: myPostsType) => {\r\n\r\n    let onePost = Store._state.profilePage.posts.map(el => <Post message={el.message} likesCount={el.likesCount}/>);\r\n\r\n    const addPost = () => {\r\n            props.addPostCallback(props.message)\r\n    }\r\n    const changeCallbackHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.changeNewTextCallback(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4>new post</h4>\r\n                <div><textarea value={props.message} onChange={changeCallbackHandler}> </textarea></div>\r\n                <div>\r\n                    <button onClick={addPost}>Button</button>\r\n                </div>\r\n            </div>\r\n            <h3>My Posts</h3>\r\n            {onePost}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\n\r\nconst ProfileInfo = () => {\r\n\r\n    return (<div>\r\n            <h1>LOGO </h1>\r\n            <div>\r\n                <h2>Ava + desc</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport Store from \"../State/State\";\r\n\r\n\r\nconst Profile= () => {\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <ProfileInfo />\r\n            <MyPosts  message={Store._state.profilePage.messageForNewPost} addPostCallback={Store.addPost.bind(Store)} changeNewTextCallback={Store.changeNewText.bind(Store)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogType> = ({name, id}) => {\r\n\r\n    let path = '/Dialogs/' + id\r\n    return (\r\n        <div className={s.Dialog}>\r\n            <NavLink to={path}>\r\n                {name}\r\n            </NavLink>\r\n        </div>)\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './Message.module.css'\r\n\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = ({message}) => {\r\n\r\n    return (\r\n        <div className={s.Message}>\r\n            {message}\r\n        </div>)\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport Store from \"../State/State\";\r\n\r\n\r\nconst Dialogs = () => {\r\n\r\n    let dialogsElements = Store._state.messagesPage.dialogs.map(el => <DialogItem name={el.name} id={el.id} />);\r\n    let messagesElements = Store._state.messagesPage.messages.map(el => <Message message={el.message} />);\r\n\r\n    return (\r\n        <div className={s.Dialogs}>\r\n            <div className={s.DialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.Messages}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/header\";\nimport Navbar from \"./components/Navbar/navbar\";\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\n\n\n\n\n\nconst App = () => {\n\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/profile' component={Profile}/>\n                    <Route path='/dialogs' component={Dialogs}/>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\n\r\nexport const renderTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n}","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Store from \"./components/State/State\";\nimport {renderTree} from \"./render\";\n\nStore.subscribe(renderTree)\nrenderTree()\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}