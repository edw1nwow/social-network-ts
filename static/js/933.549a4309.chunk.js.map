{"version":3,"file":"static/js/933.549a4309.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","components/Profile/ProfileStatusWithHook.tsx","components/Profile/ProfileDataForm.tsx","components/Profile/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, {useEffect} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = React.useState(false)\r\n    let [status, setStatus] = React.useState(props.status)\r\n        useEffect(()=>{\r\n            setStatus(props.status)\r\n        },[props.status])\r\n    const activateMode = () => {\r\n      setEditMode(true)\r\n    }\r\n    const deactivateMode = () => {\r\n        setEditMode(false)\r\n       props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e:any) =>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div> <b>Status:</b> <span onDoubleClick={activateMode} >{props.status || '-----'}</span></div>}\r\n            {editMode &&\r\n                <div><input autoFocus={true} onBlur={deactivateMode} onChange={onStatusChange}\r\n                            value={status} type='text' />\r\n                </div>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\n\r\nimport {createField, Input, Textarea} from \"../Common/Textarea\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport styles from \"../Common/FormControl.module.css\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileDataForm: React.FC<ProfileDataType & InjectedFormProps<{}, ProfileDataType>> = ({handleSubmit,profile,error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>Save</button>\r\n            {error && <div className={styles.formSummaryError}>{error} </div>}\r\n        </div>\r\n        <div>\r\n            <b> Full name:</b> {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b>\r\n            {createField('', \"lookingForAJob\", [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills:</b>\r\n            {createField('My professional skills', \"lookingForAJobDescription\", [], Textarea,)}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Some info about me: </b>\r\n            {createField('Some info about me', \"aboutMe\", [], Textarea,)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b>{Object.keys(profile.contacts).map((key?: string | undefined ) => {\r\n            if (key !== undefined) {\r\n                return <div key={key}>\r\n                    <b> {key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                </div>\r\n            }\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm<{}, ProfileDataType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from \"react\";\r\nimport Preloader from \"../Common/Preloader\";\r\n\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHook\";\r\nimport userPhoto from \"../../Assets/Img/avatar.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactNames, ProfileType} from \"../../types/types\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photos: File) => void\r\n    saveProfile:  (profile: ProfileType) => Promise<boolean>\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\ntype ContactsType = {\r\n    contactTitle?: string | null\r\n    contactValue?: string | null\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const Contacts = ({contactTitle, contactValue}: ContactsType) => {\r\n        return <div><b>{contactTitle}:</b>{contactValue}</div>\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        console.log(formData)\r\n      saveProfile(formData).then(()=>{setEditMode(false)})\r\n    }\r\n\r\n    const ProfileData = ({profile, goToEditMode}: ProfileDataType) => {\r\n\r\n        return <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edite Mode</button></div>}\r\n            <div>\r\n                <b> Full name:</b>{profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>Some info about me: </b> {profile.aboutMe}\r\n            </div>\r\n           <div>\r\n                <b>Contacts:</b>{Object.keys(profile.contacts).map((key) => {\r\n               return <Contacts key={key} contactTitle={key} contactValue={profile.contacts ? profile.contacts[key as ContactNames] : ''}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            <img src={profile.photos.large || userPhoto} alt=\"Avatar\"/>\r\n            {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n            <div>\r\n                <img src={profile.photos.small || userPhoto} alt=\"Avatar\"/>\r\n                {editMode ?  <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile} isOwner={isOwner}/> : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={()=>{setEditMode(true)}}/>}\r\n\r\n                {profile.lookingForAJob &&\r\n                    <div>\r\n                        <p>My professional skills: {profile.lookingForAJobDescription}</p>\r\n                        <h3>my links: </h3>\r\n                        <span>{profile.contacts.facebook}</span>\r\n                        <span>{profile.contacts.github}</span>\r\n                        <span>{profile.contacts.instagram}</span>\r\n                        <span>{profile.contacts.mainLink}</span>\r\n                        <span>{profile.contacts.twitter}</span>\r\n                        <span>{profile.contacts.vk}</span>\r\n                        <span>{profile.contacts.website}</span>\r\n                        <span>{profile.contacts.youtube}</span>\r\n                    </div>}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\n\r\n\r\nexport type PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({message, likesCount}) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src=\"\" alt=\"\"/>\r\n            <div>{message}</div>\r\n            <div><span>Likes {likesCount}</span></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsTypes} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validator\";\r\nimport {Textarea} from \"../../Common/Textarea\";\r\n\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\nlet maxlength = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsTypes) => {\r\n\r\n    let onePost = props.profilePage.posts.map(el => <Post key={el.id} message={el.message} likesCount={el.likesCount}/>);\r\n\r\n    const addPost = (values: AddNewPostFormType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n        return <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} placeholder={'type...'}\r\n                       validate={[required, maxlength]}/>\r\n            </div>\r\n            <div>\r\n                <button>Button</button>\r\n            </div>\r\n        </form>\r\n    }\r\n    const AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4>new post</h4>\r\n                <AddNewPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <h3>My Posts</h3>\r\n            {onePost}\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;\r\n","import {actions, initialStateType} from \"../../../redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/Redux-store\";\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    profilePage:initialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsPropsTypes = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(actions.addPost(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\n\r\n type ProfilePropsType={\r\n    profile: ProfileType | null\r\n     status: string\r\n     updateStatus: (status: string) => void\r\n     isOwner: boolean\r\n     savePhoto: (photos:File) => void\r\n     saveProfile:  (profile: ProfileType) => Promise<boolean>\r\n }\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/Profile-reducer\";\r\nimport React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/Redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photos:File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<boolean>\r\n\r\n\r\n}\r\n\r\n\r\n\r\ntype PropsType = RouteComponentProps<any> & ProfilePropsTypes\r\nexport type ProfilePropsTypes = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.id\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                userId = this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.id !== prevProps.match.params.id){\r\n        this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} isOwner={!this.props.match.params.id} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus} savePhoto={this.props.savePhoto}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter, withAuthRedirect\r\n)(ProfileContainer)"],"names":["props","React","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","type","reduxForm","form","handleSubmit","profile","error","onSubmit","className","styles","createField","Input","Textarea","Object","keys","contacts","map","key","undefined","isOwner","savePhoto","saveProfile","useState","Preloader","Contacts","contactTitle","contactValue","ProfileData","goToEditMode","onClick","fullName","lookingForAJob","aboutMe","ProfileStatusWithHook","src","photos","large","userPhoto","alt","target","files","length","small","initialValues","formData","console","log","then","lookingForAJobDescription","facebook","github","instagram","mainLink","twitter","vk","website","youtube","message","likesCount","maxlength","maxLengthCreator","onePost","profilePage","posts","el","id","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","values","addPost","newPostText","connect","state","dispatch","actions","MyPosts","s","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","withAuthRedirect"],"sourceRoot":""}